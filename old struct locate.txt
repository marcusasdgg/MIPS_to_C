struct Variable_Locate Find_Var(std::string line) //this checks if there contains any variable keywords, if none returns empty.
        {
            struct Variable_Locate temp;
            for (int i = 0 ; i < 3 ; i++)
            {
                std::size_t found = line.find(keywords[i]);
                if ( found != std::string::npos)
                {
                    
                    if(line[found + keywords[i].size()] != ' ') //if the character after the word is not a space we discard.
                    {
                        continue;
                    }
                    switch(i)
                    {
                        case 0:
                            temp.char_position = found;
                            temp.line = line;
                            temp.type = Var_type::INTEGER;
                            return temp;
                        break;
                        
                        case 1:
                            temp.char_position = found;
                            temp.line = line;
                            temp.type = Var_type::STRING;
                            return temp;
                        break;

                        case 2:
                            temp.char_position = found;
                            temp.line = line;
                            temp.type = Var_type::DOUBLE;
                            return temp;
                        break;

                    }
                    
                }
            }

            return temp;
        }
 
        struct Operation_Locate Find_Op(std::string line) //checks if any contains any operation keywords (including variables) returns the enum for that else returns empty. alright no now we are returning an array of structs, this is because

        {
            struct Operation_Locate temp;
            for (int i = 3 ; i < 9 ; i++)
            {
                std::size_t found = line.find(keywords[i]);
                if ( found != std::string::npos)
                {
                    if (i ==  3)
                    {
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Operation_type::PRINTF;
                        return temp;
                    }
                    if (i == 4)
                    {
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Operation_type::SCANF;
                        return temp;
                    }

                    if (line[found + keywords[i].size()] != ' ')
                    {
                        continue;
                    }
                    
                    switch (i)
                    {
                    case 5:
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Operation_type::RETURN;
                        return temp;
                    case 6:
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Operation_type::WHILE;
                        return temp;
                    case 7:
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Operation_type::IF;
                        return temp;
                    case 8:
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Operation_type::ELSE;
                        return temp;
                    default:
                        break;
                    }
                    
                }
            }
            return temp;

        }

        struct Equality_Locate Find_Eq(std::string line)
        {
            struct Equality_Locate temp;
            for (int i = 11 ; i < 16 ; i++)
            {
                std::size_t found = line.find(keywords[i]);
                if ( found != std::string::npos)
                {
                    if (line[found + keywords[i].size()] != ' ')
                    {
                        continue;
                    }

                    switch (i)
                    {
                        case 11:
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Equ_type::EQUAL;
                        return temp;
                        case 12:
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Equ_type::SMALLER;
                        return temp;
                        case 13:
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Equ_type::BIGGER;
                        return temp;
                        case 14:
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Equ_type::SMALLER_EQUAL;
                        return temp;
                        case 15:
                        temp.line = line;
                        temp.char_position = found;
                        temp.type = Equ_type::BIGGER_EQUAL;
                        return temp;
                        default:
                            break;
                    }
                }
                
            }
            return temp;
        }

        struct Math_Locate Find_Mat(std::string line)
        {
            struct Math_Locate temp;
        }   

        struct Round_Locate Find_Locate(std::string line)
        {
            struct Round_Locate temp;
        }
        
        
        struct Square_Locate Find_Square(std::string line)
        {
            struct Square_Locate temp;
        }

        struct Squiggly_Locate Find_Squigglyt(std::string line)
        {
            struct Squiggly_Locate temp;
        }

        keywords.push_back("int "); //index 0
        keywords.push_back("string "); //index 1 //function to find implemented find_var
        keywords.push_back("double "); //index 2

        keywords.push_back("printf(");//index 3 //function to find implemented_op
        keywords.push_back("scanf("); //index 4


        keywords.push_back("return");//index 5
        keywords.push_back("while");//index 6
        keywords.push_back("if");//index 7 //function to find implemented find_op will make a new one in future
        keywords.push_back("else");//index 8
    
        keywords.push_back("=");//index 9
        keywords.push_back("<");//index 10
        keywords.push_back(">");//index 11 //not yet implemented
        keywords.push_back("<=");//index 12
        keywords.push_back(">=");//index 13

        keywords.push_back("+");//index 14
        keywords.push_back("-");//index 15  //not yet implmented
        keywords.push_back("/");//index 16
        keywords.push_back("*");//index 17
        keywords.push_back("%");//index 18

        template<typename t> //okay control structure of this thing.
t Find_Thing(std::string line) //this returns back a vector, also we need to declare the type before usage remember.
{   //alright figured out that we can infer the (,),{,},[,] symbols later.
    int char_pos = 0;
    t vector;
    //i.e t is the type std::vector<variable_locate>
    //it then returns vector which is variable locate
    int i = 0;

    if (typeid(t) == typeid(std::vector<Variable_Locate>))
    {
        i = 0;
    }

    else if (typeid(t) == typeid(std::vector<Math_Locate>))
    {
        i = 14;
    }

    else if (typeid(t) == typeid(std::vector<Equality_Locate>))
    {
        i = 9;
    }

    else if (typeid(t) == typeid(std::vector<Operation_Locate>))
    {
        i = 3;
    }



    while(true)
    {
        std::size_t found = line.find(keywords[i],char_pos);
        if (found == std::string::npos)
        {
            i++;
        }   

        if(char_pos > line.size())
        {
            return vector;
        }

        if (typeid(t) == typeid(std::vector<Variable_Locate>))
        {
            std::cout<<"variable locate called\n";
            if (i > 2)
            {
                return vector;
            }
            Variable_Locate temp_var;
            switch(i)
                {
                    case 0:
                    temp_var.char_position = found;
                    temp_var.line = line;
                    temp_var.type = Var_type::INTEGER;
                    vector.push_back(temp_var);
                    char_pos = found + keywords[i].size() + 1;
                    break;
                        
                    case 1:
                    temp_var.char_position = found;
                    temp_var.line = line;
                    temp_var.type = Var_type::STRING;
                    vector.push_back(temp_var);
                    char_pos = found + keywords[i].size() + 1;
                    break;

                    case 2:
                    temp_var.char_position = found;
                    temp_var.line = line;
                    temp_var.type = Var_type::DOUBLE;
                    vector.push_back(temp_var);
                    char_pos = found + keywords[i].size() + 1;
                    break;
        }
        }

        else if (typeid(t) == typeid(std::vector<Math_Locate>))
        {
            std::cout<<"math locate called\n";
            Math_Locate temp_mat;
            if (i < 14 || i > 18)
            {
                return vector;
            }

            switch(i)
            {
                case 14:
                temp_mat.char_position = found;
                temp_mat.line = line;
                temp_mat.type = Mat_type::ADD;
                vector.push_back(temp_mat);
                char_pos = found + keywords[i].size() + 1;
                break;
                case 15:
                temp_mat.char_position = found;
                temp_mat.line = line;
                temp_mat.type = Mat_type::SUBTRACT;
                vector.push_back(temp_mat);
                char_pos = found + keywords[i].size() + 1;
                break;
                case 16:
                temp_mat.char_position = found;
                temp_mat.line = line;
                temp_mat.type = Mat_type::DIVIDE;
                vector.push_back(temp_mat);
                char_pos = found + keywords[i].size() + 1;
                break;
                case 17:
                temp_mat.char_position = found;
                temp_mat.line = line;
                temp_mat.type = Mat_type::MULTIPLY;
                vector.push_back(temp_mat);
                char_pos = found + keywords[i].size() + 1;
                break;
                case 18:
                temp_mat.char_position = found;
                temp_mat.line = line;
                temp_mat.type = Mat_type::MOD;
                vector.push_back(temp_mat);
                char_pos = found + keywords[i].size() + 1;
                break;
            }
        }

        else if (typeid(t) == typeid(std::vector<Equality_Locate>))
        {
            std::cout<<"equ locate called\n";
            Equality_Locate temp_equ;
            if (i < 9 || i > 13)
            {
                return vector;
            }

            switch (i)
            {
                case 9:
                temp_equ.char_position = found;
                temp_equ.line = line;
                temp_equ.type = Equ_type::EQUAL;
                vector.push_back(temp_equ);
                char_pos = found + keywords[i].size() + 1;
                break;

                case 10:
                temp_equ.char_position = found;
                temp_equ.line = line;
                temp_equ.type = Equ_type::SMALLER;
                vector.push_back(temp_equ);
                char_pos = found + keywords[i].size() + 1;
                break;

                case 11:
                temp_equ.char_position = found;
                temp_equ.line = line;
                temp_equ.type = Equ_type::BIGGER;
                vector.push_back(temp_equ);
                char_pos = found + keywords[i].size() + 1;
                break;

                case 12:
                temp_equ.char_position = found;
                temp_equ.line = line;
                temp_equ.type = Equ_type::SMALLER_EQUAL;
                vector.push_back(temp_equ);
                char_pos = found + keywords[i].size() + 1;
                break;

                case 13:
                temp_equ.char_position = found;
                temp_equ.line = line;
                temp_equ.type = Equ_type::BIGGER_EQUAL;
                vector.push_back(temp_equ);
                char_pos = found + keywords[i].size() + 1;
                break;
            }
        }

        else if (typeid(t) == typeid(std::vector<Operation_Locate>))
        {
            std::cout<<"oper locate called\n";
            Operation_Locate temp_Op;
            if (i < 3 || i > 8)
            {
                return vector;
            }

            switch (i)
            {
                case 3:
                temp_Op.char_position = found;
                temp_Op.line = line;
                temp_Op.type = Operation_type::PRINTF;
                vector.push_back(temp_Op);
                char_pos = found + keywords[i].size() + 1;
                break;
                case 5:
                temp_Op.char_position = found;
                temp_Op.line = line;
                temp_Op.type = Operation_type::SCANF;
                vector.push_back(temp_Op);
                char_pos = found + keywords[i].size() + 1;
                break;
                case 6:
                temp_Op.char_position = found;
                temp_Op.line = line;
                temp_Op.type = Operation_type::RETURN;
                vector.push_back(temp_Op);
                char_pos = found + keywords[i].size() + 1;
                break;
                case 7:
                temp_Op.char_position = found;
                temp_Op.line = line;
                temp_Op.type = Operation_type::IF;
                vector.push_back(temp_Op);
                char_pos = found + keywords[i].size() + 1;
                break;
                case 8:
                temp_Op.char_position = found;
                temp_Op.line = line;
                temp_Op.type = Operation_type::ELSE;
                vector.push_back(temp_Op);
                char_pos = found + keywords[i].size() + 1;
                break;
            }
        }
        

    }

    
    
    return vector;
}



  if (typeid(t) == typeid(std::vector<Variable_Locate>))
    {
        i = 0;
    }

    else if (typeid(t) == typeid(std::vector<Math_Locate>))
    {
        i = 14;
    }

    else if (typeid(t) == typeid(std::vector<Equality_Locate>))
    {
        i = 9;
    }

    else if (typeid(t) == typeid(std::vector<Operation_Locate>))
    {
        i = 3;
    }




struct Variable_Locate
{
    
    
    enum Var_type type;
    int line_number;
    int char_position;
    std::string line;
};

struct Equality_Locate
{
    Equality_Locate()
    {
        type = Equ_type::EMPTY;
        line_number = -1;
        char_position = -1;
    }
    enum Equ_type type;
    int line_number;
    int char_position;
    std::string line;
};

struct Math_Locate
{
    Math_Locate()
    {
        type = Mat_type::EMPTY;
        line_number = -1;
        char_position = -1;
    }
    enum Mat_type type;
    int line_number;
    int char_position;
    std::string line;
};


struct Operation_Locate
{
    Operation_Locate()
    {
        type = Operation_type::EMPTY;
        line_number = -1;
        char_position = -1;
    }
    enum Operation_type type;
    int line_number;
    int char_position;
    std::string line;
};

        type = Var_type::EMPTY;
        line_number = -1;
        char_position = -1;

                type = Operation_type::EMPTY;
        line_number = -1;
        char_position = -1;